#include <iostream>
using namespace std;



class Matrix2D
{
private:
    int a;
    int b;
    int c;
    int d;
public:

    Matrix2D(){}


    Matrix2D(int a, int b, int c, int d)
    {
        this->a = a;
        this->b = b;
        this->c = c;
        this->d = d;
    }


    ~Matrix2D(){}


    //int getx()
    //{
     //   return x;
    //}


    //int gety()
   /// {
     //   return y;
    //}

    //void show()
       // {
       //         cout<<"("<<this->x<<";"<<this->y<<")"<<endl;
       //}

    //void setx(int i) const
    //{
      //  this->x = i;
    //}


    //void sety(int i) const
    //{
     //   this->y = i;
    //}







    Matrix2D operator + (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a + rhs.a;
        v->b = this->b + rhs.b;
        v->c = this->c + rhs.c;
        v->d = this->d + rhs.d;
        return *v;
    }


    Matrix2D operator - (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a - rhs.a;
        v->b = this->b - rhs.b;
        v->c = this->c - rhs.c;
        v->d = this->d - rhs.d;
        return *v;
    }


    Matrix2D operator * (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a * rhs.a + this->b * rhs.c;
        v->b = this->a * rhs.b + this->b * rhs.d;
        v->c = this->c * rhs.a + this->d * rhs.c;
        v->d = this->c * rhs.b + this->d * rhs.d;
        return *v;
    }


    Matrix2D operator * (int alpha)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a * alpha;
        v->b = this->b * alpha;
        v->c = this->c * alpha;
        v->d = this->d * alpha;
        return *v;
    }


    friend Matrix2D operator * (int alpha, const Matrix2D &rhs);

};


Matrix2D operator * (int alpha, const Matrix2D &rhs)
{
    Matrix2D* v =  new Matrix2D();
        v->a = rhs.a * alpha;
        v->b = rhs.b * alpha;
        v->c = rhs.c * alpha;
        v->d = rhs.d * alpha;
        return *v;
}
main()
{
    cout<<"Hello world!"<< endl;
}
