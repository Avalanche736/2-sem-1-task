#include <iostream>
using namespace std;



class Vector2D
{
private:
    int x;
    int y;
public:

    Vector2D(){}


    Vector2D(int x, int y)
    {
        this->x = x;
        this->y = y;
    }

    ~Vector2D() {}
    int getx()
    {
        return x;
    }


    int gety()
    {
        return y;
    }
    void setx(int i)
    {
        this->x = i;
    }


    void sety(int i)
    {
        this->y = i;
    }
};




class Matrix2D
{
private:
    int a;
    int b;
    int c;
    int d;
public:

    Matrix2D(){}


    Matrix2D(int a, int b, int c, int d)
    {
        this->a = a;
        this->b = b;
        this->c = c;
        this->d = d;
    }


    ~Matrix2D(){}


    int geta()
    {
        return a;
    }
    int getb()
    {
        return b;
    }
    int getc()
    {
        return c;
    }
    int getd()
    {
        return d;
    }




    //void setx(int i) const
    //{
      //  this->x = i;
    //}


    //void sety(int i) const
    //{
     //   this->y = i;
    //}


    void show ()
    {
        cout << "|" << a << " " << b << "|" << endl;
        cout << "|" << c << " " << d << "|" << endl;
    }



    int det()
    {
        return (a*d-b*c);
    }





    Matrix2D operator + (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a + rhs.a;
        v->b = this->b + rhs.b;
        v->c = this->c + rhs.c;
        v->d = this->d + rhs.d;
        return *v;
    }


    Matrix2D operator - (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a - rhs.a;
        v->b = this->b - rhs.b;
        v->c = this->c - rhs.c;
        v->d = this->d - rhs.d;
        return *v;
    }


    Matrix2D operator * (const Matrix2D &rhs)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a * rhs.a + this->b * rhs.c;
        v->b = this->a * rhs.b + this->b * rhs.d;
        v->c = this->c * rhs.a + this->d * rhs.c;
        v->d = this->c * rhs.b + this->d * rhs.d;
        return *v;
    }


    Matrix2D operator * (int alpha)
    {
        Matrix2D* v =  new Matrix2D();
        v->a = this->a * alpha;
        v->b = this->b * alpha;
        v->c = this->c * alpha;
        v->d = this->d * alpha;
        return *v;
    }


    friend Matrix2D operator * (int alpha, const Matrix2D &rhs);
    friend Matrix2D operator * (const Matrix2D &rhs, const Vector2D &v);

};


Matrix2D operator * (int alpha, const Matrix2D &rhs)
{
    Matrix2D* v =  new Matrix2D();
        v->a = rhs.a * alpha;
        v->b = rhs.b * alpha;
        v->c = rhs.c * alpha;
        v->d = rhs.d * alpha;
        return *v;
}

Matrix2D operator * (const Matrix2D &rhs, const Vector2D &v)
{
    Vector2D* vec =  new Vector2D();
    vec->setx(rhs.a * v.getx() + rhs.b * v.gety());
    vec->sety(rhs.b * v.getx() + rhs.c * v.gety());
    return *vec;
}


main()
{
    Matrix2D a(1,1,1,1);
    Matrix2D b(5,1,3,2);
    Matrix2D d = a * b;
    d.show();

}

